import { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { Radar, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Legend, ResponsiveContainer } from 'recharts';


// interface CriticalPoint {
//   process: string;
//   subprocess: string;
//   governance: number | null;
//   monitoring_control: number | null;
//   technology: number | null;
//   organization: number | null;
//   process_rating: number | null;
//   notes: string;
//   is_critical: boolean;
// }

const CATEGORIES_ORDER = ["Governance", "Monitoring & Control", "Technology", "Organization"];

const ResultsByCategoryPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [organized, setOrganized] = useState<any>({});
  const [loading, setLoading] = useState(true);
  const [loadingAI, setLoadingAI] = useState(false);
  const [aiConclusions, setAiConclusions] = useState<string | null>(null);

  useEffect(() => {
    axios.get(`/api/assessment/${id}/results`)
      .then(res => {
        organizeByCategory(res.data);
        setLoading(false);
      })
      .catch(() => setLoading(false));

    // Carica AI
    setLoadingAI(true);
    axios.get(`/api/assessment/${id}/ai-suggestions-enhanced?include_roadmap=true`)
      .then(res => {
        setAiConclusions(res.data.suggestions);
        setLoadingAI(false);
      })
      .catch(() => setLoadingAI(false));
  }, [id]);


  //   const calculateCriticalPoints = (): CriticalPoint[] => {
  //     const criticalPoints: CriticalPoint[] = [];
  //     
  //     CATEGORIES_ORDER.forEach(cat => {
  //       Object.entries(organized[cat] || {}).forEach(([process, activities]: any) => {
  //         Object.entries(activities).forEach(([activity, dimensions]: any) => {
  //           const dimAverages: { [key: string]: number | null } = {};
  //           let allNotes: string[] = [];
  //           
  //           CATEGORIES_ORDER.forEach(category => {
  //             const catDims = organized[category]?.[process]?.[activity] || {};
  //             const scores: number[] = [];
  //             Object.values(catDims).forEach((d: any) => {
  //               if (!d.is_not_applicable) scores.push(d.score);
  //               if (d.note) allNotes.push(d.note);
  //             });
  //             dimAverages[category] = scores.length > 0 ? scores.reduce((a,b) => a+b, 0) / scores.length : null;
  //           });
  //           
  //           const validAvgs = Object.values(dimAverages).filter(v => v !== null) as number[];
  //           const processRating = validAvgs.length > 0 ? validAvgs.reduce((a,b) => a+b, 0) / validAvgs.length : null;
  //           const isCritical = validAvgs.some(v => v <= 1.5);
  //           
  //           criticalPoints.push({
  //             process,
  //             subprocess: activity,
  //             governance: dimAverages['Governance'],
  //             monitoring_control: dimAverages['Monitoring & Control'],
  //             technology: dimAverages['Technology'],
  //             organization: dimAverages['Organization'],
  //             process_rating: processRating,
  //             notes: [...new Set(allNotes)].join('; '),
  //             is_critical: isCritical
  //           });
  //         });
  //       });
  //     });
  //     
  //     return criticalPoints;
  //   };

  //   const getScoreIcon = (score: number | null) => {
  //     if (score === null) return <span className="text-gray-400">N/A</span>;
  //     if (score <= 1.0) return <span className="text-red-600 text-xl">‚ùå</span>;
  //     else if (score <= 2.0) return <span className="text-orange-500 text-xl">‚≠ï</span>;
  //     else if (score <= 3.0) return <span className="text-yellow-500 text-xl">‚ö†Ô∏è</span>;
  //     else return <span className="text-green-600 text-xl">‚úÖ</span>;
  //   };
  // 
  const organizeByCategory = (data: any[]) => {
    const org: any = {};
    CATEGORIES_ORDER.forEach(cat => { org[cat] = {}; });

    data.forEach(r => {
      if (!org[r.category][r.process]) org[r.category][r.process] = {};
      if (!org[r.category][r.process][r.activity]) org[r.category][r.process][r.activity] = {};
      org[r.category][r.process][r.activity][r.dimension] = {
        score: r.score,
        note: r.note,
        is_not_applicable: r.is_not_applicable
      };
    });

    setOrganized(org);
  };

  const calculateRowAverage = (dimensions: any) => {
    let total = 0, count = 0;
    Object.values(dimensions).forEach((d: any) => {
      if (!d.is_not_applicable) {
        total += d.score;
        count++;
      }
    });
    return count > 0 ? total / count : null;
  };

  const calculateProcessAverage = (activities: any) => {
    const avgs: number[] = [];
    Object.values(activities).forEach((dims: any) => {
      const avg = calculateRowAverage(dims);
      if (avg !== null) avgs.push(avg);
    });
    return avgs.length > 0 ? (avgs.reduce((a,b) => a+b, 0) / avgs.length).toFixed(2) : 'N/A';
  };

  const getAllActivitiesList = () => {
    const list: any[] = [];
    CATEGORIES_ORDER.forEach(cat => {
      Object.entries(organized[cat] || {}).forEach(([proc, acts]: any) => {
        Object.entries(acts).forEach(([act, dims]: any) => {
          const avg = calculateRowAverage(dims);
          if (avg !== null) {
            const note = (Object.values(dims).find((d: any) => d?.note) as any)?.note || '';
            list.push({ process: proc, activity: act, category: cat, average: avg, note });
          }
        });
      });
    });
    return list;
  };

  const critici = getAllActivitiesList().filter(a => {
    const scores = Object.values(organized[a.category]?.[a.process]?.[a.activity] || {})
      .filter((d: any) => !d.is_not_applicable)
      .map((d: any) => d.score);
    return scores.some(s => s !== null && s !== undefined && s <= 1.5);
  }).sort((a, b) => a.average - b.average);

  const debolezza = getAllActivitiesList().filter(a => {
    const scores = Object.values(organized[a.category]?.[a.process]?.[a.activity] || {})
      .filter((d: any) => !d.is_not_applicable)
      .map((d: any) => d.score);
    return scores.some(s => s !== null && s !== undefined && s > 1.5 && s < 3.0);
  }).sort((a, b) => a.average - b.average);

  const forza = getAllActivitiesList().filter(a => {
    const scores = Object.values(organized[a.category]?.[a.process]?.[a.activity] || {})
      .filter((d: any) => !d.is_not_applicable)
      .map((d: any) => d.score);
    return scores.some(s => s !== null && s !== undefined && s >= 3.0);
  }).sort((a, b) => (b.average || 0) - (a.average || 0));


    if (loading) return <div className="p-8">Caricamento...</div>;

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-7xl mx-auto">
        <div className="mb-8">
          <h1 className="text-3xl font-bold mb-6">Risultati Assessment Digitale 4.0</h1>
          <div className="flex justify-between items-center">
            <div className="bg-blue-500 text-white px-6 py-3 rounded-lg">
              <span className="text-sm font-semibold">FINAL RATE:</span>
              <span className="text-2xl font-bold ml-2">
                {(() => {
                  const allAvgs: number[] = [];
                  CATEGORIES_ORDER.forEach(cat => {
                    Object.values(organized[cat] || {}).forEach((activities: any) => {
                      Object.values(activities).forEach((dims: any) => {
                        const avg = calculateRowAverage(dims);
                        if (avg !== null) allAvgs.push(avg);
                      });
                    });
                  });
                  return allAvgs.length > 0 ? (allAvgs.reduce((a,b) => a+b, 0) / allAvgs.length).toFixed(2) : 'N/A';
                })()}
              </span>
            </div>
            <div className="flex gap-4">
              <button onClick={() => window.open(`/api/assessment/${id}/pdf`, '_blank')} className="px-6 py-3 bg-blue-500 hover:bg-blue-600 text-white rounded-lg font-semibold">
                üìÑ Scarica PDF
              </button>
              <button onClick={() => navigate('/dashboard')} className="px-6 py-3 bg-gray-300 hover:bg-gray-400 text-gray-800 rounded-lg font-semibold">
                Torna alla Dashboard
              </button>
            </div>
          </div>
        </div>

        {/* Tabelle riassuntive */}
        <div className="mb-12 space-y-8">
          {/* Punti Critici */}
          <div className="bg-white rounded-xl shadow-lg p-8 border border-gray-200">
            <div className="flex items-center gap-3 mb-6">
              <div className="bg-red-600 text-white px-4 py-2 rounded-lg">
                <span className="font-bold">&lt; 2.00</span>
              </div>
              <h3 className="text-2xl font-bold">PUNTI CRITICI ({critici.length})</h3>
            </div>
            {critici.length === 0 ? (
              <p>Nessun punto critico</p>
            ) : (
              <table className="w-full border-collapse text-sm">
                <thead>
                  <tr className="bg-red-600">
                    <th className="border px-3 py-2 text-white">Processo</th>
                    <th className="border px-3 py-2 text-white">Sottoprocesso</th>
                    <th className="border px-3 py-2 text-white">Categoria</th>
                    <th className="border px-3 py-2 text-white">Media</th>
                    <th className="border px-3 py-2 text-white">Note</th>
                  </tr>
                </thead>
                <tbody>
                  {critici.map((p, i) => (
                    <tr key={i} className="bg-red-50">
                      <td className="border px-3 py-2">{p.process}</td>
                      <td className="border px-3 py-2">{p.activity}</td>
                      <td className="border px-3 py-2">{p.category}</td>
                      <td className="border px-3 py-2 text-center font-bold">{p.average.toFixed(2)}</td>
                      <td className="border px-3 py-2 text-xs">{p.note || '-'}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            )}
          </div>

          {/* Punti di Debolezza */}
          <div className="bg-white rounded-xl shadow-lg p-8 border border-gray-200">
            <div className="flex items-center gap-3 mb-6">
              <div className="bg-yellow-500 text-white px-4 py-2 rounded-lg">
                <span className="font-bold">2.00 - 2.99</span>
              </div>
              <h3 className="text-2xl font-bold">PUNTI DI DEBOLEZZA ({debolezza.length})</h3>
            </div>
            {debolezza.length === 0 ? (
              <p>Nessun punto di debolezza</p>
            ) : (
              <table className="w-full border-collapse text-sm">
                <thead>
                  <tr className="bg-yellow-500">
                    <th className="border px-3 py-2 text-white">Processo</th>
                    <th className="border px-3 py-2 text-white">Sottoprocesso</th>
                    <th className="border px-3 py-2 text-white">Categoria</th>
                    <th className="border px-3 py-2 text-white">Media</th>
                    <th className="border px-3 py-2 text-white">Note</th>
                  </tr>
                </thead>
                <tbody>
                  {debolezza.map((p, i) => (
                    <tr key={i} className="bg-yellow-50">
                      <td className="border px-3 py-2">{p.process}</td>
                      <td className="border px-3 py-2">{p.activity}</td>
                      <td className="border px-3 py-2">{p.category}</td>
                      <td className="border px-3 py-2 text-center font-bold">{p.average.toFixed(2)}</td>
                      <td className="border px-3 py-2 text-xs">{p.note || '-'}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            )}
          </div>

          {/* Punti di Forza */}
          <div className="bg-white rounded-xl shadow-lg p-8 border border-gray-200">
            <div className="flex items-center gap-3 mb-6">
              <div className="bg-green-600 text-white px-4 py-2 rounded-lg">
                <span className="font-bold">&gt;= 3.00</span>
              </div>
              <h3 className="text-2xl font-bold">PUNTI DI FORZA ({forza.length})</h3>
            </div>
            {forza.length === 0 ? (
              <p>Nessun punto di forza</p>
            ) : (
              <table className="w-full border-collapse text-sm">
                <thead>
                  <tr className="bg-green-600">
                    <th className="border px-3 py-2 text-white">Processo</th>
                    <th className="border px-3 py-2 text-white">Sottoprocesso</th>
                    <th className="border px-3 py-2 text-white">Categoria</th>
                    <th className="border px-3 py-2 text-white">Media</th>
                    <th className="border px-3 py-2 text-white">Note</th>
                  </tr>
                </thead>
                <tbody>
                  {forza.map((p, i) => (
                    <tr key={i} className="bg-green-50">
                      <td className="border px-3 py-2">{p.process}</td>
                      <td className="border px-3 py-2">{p.activity}</td>
                      <td className="border px-3 py-2">{p.category}</td>
                      <td className="border px-3 py-2 text-center font-bold">{p.average.toFixed(2)}</td>
                      <td className="border px-3 py-2 text-xs">{p.note || '-'}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            )}
          </div>
        </div>

        {/* Sezione per Categoria */}
        {CATEGORIES_ORDER.filter(cat => organized[cat]).map(category => (
          <div key={category} className="mb-12">
            <h2 className="text-2xl font-bold text-white bg-blue-600 p-4 rounded-t-xl mb-6">
              {category}
            </h2>
            
            {Object.entries(organized[category]).map(([process, activities]: [string, any]) => {
              const allActivitiesKeys = Object.keys(activities);
              const allDimensions = allActivitiesKeys.length > 0 ? Object.keys(activities[allActivitiesKeys[0]]) : [];
              const processAvg = calculateProcessAverage(activities);
            
              return (
                <div key={process} className="bg-white shadow-lg rounded-xl p-8 mb-6">
                  <div className="flex justify-between items-center mb-4">
                    <h3 className="text-xl font-bold text-gray-800">{process}</h3>
                    <div className="bg-green-500 text-white px-4 py-2 rounded-lg">
                      <span className="text-sm font-semibold">MEDIA:</span>
                      <span className="text-xl font-bold ml-2">{processAvg}</span>
                    </div>
                  </div>

                  <div className="overflow-x-auto">
                    <table className="w-full border-collapse text-sm">
                      <thead>
                        <tr className="bg-blue-500">
                          <th className="border px-3 py-2 text-white">Attivit√†</th>
                          {allDimensions.map(dim => (
                            <th key={dim} className="border px-3 py-2 text-white">{dim.substring(0,50)}</th>
                          ))}
                          <th className="border px-3 py-2 text-white">Media</th>
                          <th className="border px-3 py-2 text-white">Note</th>
                        </tr>
                      </thead>
                      <tbody>
                        {Object.entries(activities).map(([activity, dimensions]: [string, any]) => {
                          const firstDim = Object.values(dimensions)[0] as any;
                          const note = firstDim?.note || '';
                          const rowAvg = calculateRowAverage(dimensions);
                          
                          return (
                            <tr key={activity} className="hover:bg-gray-50">
                              <td className="border px-3 py-2 font-medium">{activity}</td>
                              {allDimensions.map(dim => {
                                const dimData = dimensions[dim];
                                const score = dimData?.score ?? 0;
                                const isNA = dimData?.is_not_applicable;
                                
                                return (
                                  <td key={dim} className="border px-2 py-2 text-center">
                                    {isNA ? (
                                      <span className="inline-block px-3 py-1 rounded font-semibold bg-gray-200 text-gray-600">N/A</span>
                                    ) : (
                                      <span className={`inline-block px-3 py-1 rounded font-semibold ${
                                        score === 0 ? 'bg-red-100 text-red-800' :
                                        score === 1 ? 'bg-orange-100 text-orange-800' :
                                        score === 2 ? 'bg-yellow-100 text-yellow-800' :
                                        score === 3 ? 'bg-yellow-100 text-yellow-700' :
                                        score === 4 ? 'bg-green-100 text-green-800' :
                                        'bg-blue-100 text-blue-800'
                                      }`}>
                                        {score}
                                      </span>
                                    )}
                                  </td>
                                );
                              })}
                              <td className="border px-3 py-2 text-center bg-blue-50">
                                <span className="font-bold text-blue-800">
                                  {rowAvg !== null ? rowAvg.toFixed(2) : 'N/A'}
                                </span>
                              </td>
                              <td className="border px-3 py-2 text-gray-600 text-xs">
                                {note || '-'}
                              </td>
                            </tr>
                          );
                        })}
                      </tbody>
                    </table>
                  </div>
                </div>
              );
            })}
          </div>
        ))}

        {/* Radar Charts */}
        <div className="mt-12 space-y-8">
          {/* Radar per Processo */}
          <div className="bg-white rounded-xl shadow-lg p-8">
            <h3 className="text-2xl font-bold mb-6">Radar per Processo</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {Object.keys(organized[CATEGORIES_ORDER[0]] || {}).map(process => {
                const data = CATEGORIES_ORDER.map(cat => {
                  const activities = organized[cat]?.[process] || {};
                  const avgs: number[] = [];
                  Object.values(activities).forEach((dims: any) => {
                    const avg = calculateRowAverage(dims);
                    if (avg !== null) avgs.push(avg);
                  });
                  return {
                    category: cat,
                    value: avgs.length > 0 ? avgs.reduce((a,b) => a+b, 0) / avgs.length : 0
                  };
                });
                
                return (
                  <div key={process} className="border rounded-lg p-4">
                    <h4 className="font-bold text-lg mb-4 text-center">{process}</h4>
                    <ResponsiveContainer width="100%" height={300}>
                      <RadarChart data={data}>
                        <PolarGrid />
                        <PolarAngleAxis dataKey="category" />
                        <PolarRadiusAxis angle={90} domain={[0, 5]} />
                        <Radar name={process} dataKey="value" stroke="#3b82f6" fill="#3b82f6" fillOpacity={0.6} />
                      </RadarChart>
                    </ResponsiveContainer>
                  </div>
                );
              })}
            </div>
          </div>

          {/* Radar per Categoria */}
          <div className="bg-white rounded-xl shadow-lg p-8">
            <h3 className="text-2xl font-bold mb-6">Radar per Categoria</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {CATEGORIES_ORDER.map(category => {
                const processes = Object.keys(organized[category] || {});
                const data = processes.map(proc => {
                  const activities = organized[category]?.[proc] || {};
                  const avgs: number[] = [];
                  Object.values(activities).forEach((dims: any) => {
                    const avg = calculateRowAverage(dims);
                    if (avg !== null) avgs.push(avg);
                  });
                  return {
                    process: proc,
                    value: avgs.length > 0 ? avgs.reduce((a,b) => a+b, 0) / avgs.length : 0
                  };
                });
                
                return (
                  <div key={category} className="border rounded-lg p-4">
                    <h4 className="font-bold text-lg mb-4 text-center">{category}</h4>
                    <ResponsiveContainer width="100%" height={300}>
                      <RadarChart data={data}>
                        <PolarGrid />
                        <PolarAngleAxis dataKey="process" />
                        <PolarRadiusAxis angle={90} domain={[0, 5]} />
                        <Radar name={category} dataKey="value" stroke="#10b981" fill="#10b981" fillOpacity={0.6} />
                      </RadarChart>
                    </ResponsiveContainer>
                  </div>
                );
              })}
            </div>
          </div>

          {/* Radar Riassuntivo Processi */}
          <div className="bg-white rounded-xl shadow-lg p-8">
            <h3 className="text-2xl font-bold mb-6">Radar Riassuntivo - Confronto Processi</h3>
            <ResponsiveContainer width="100%" height={500}>
              <RadarChart data={(() => {
                const processes = Object.keys(organized[CATEGORIES_ORDER[0]] || {});
                return CATEGORIES_ORDER.map(cat => ({
                  category: cat,
                  ...processes.reduce((acc, proc) => {
                    const activities = organized[cat]?.[proc] || {};
                    const avgs: number[] = [];
                    Object.values(activities).forEach((dims: any) => {
                      const avg = calculateRowAverage(dims);
                      if (avg !== null) avgs.push(avg);
                    });
                    acc[proc] = avgs.length > 0 ? avgs.reduce((a,b) => a+b, 0) / avgs.length : 0;
                    return acc;
                  }, {} as any)
                }));
              })()}>
                <PolarGrid />
                <PolarAngleAxis dataKey="category" />
                <PolarRadiusAxis angle={90} domain={[0, 5]} />
                {Object.keys(organized[CATEGORIES_ORDER[0]] || {}).map((proc, idx) => {
                  const colors = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6'];
                  return <Radar key={proc} name={proc} dataKey={proc} stroke={colors[idx % colors.length]} fill={colors[idx % colors.length]} fillOpacity={0.3} />;
                })}
                <Legend />
              </RadarChart>
            </ResponsiveContainer>
          </div>
        </div>

        {/* Conclusioni AI */}
        <div className="mt-12 bg-gradient-to-r from-purple-50 to-blue-50 rounded-xl shadow-lg p-8 border-2 border-purple-200">
          <div className="flex items-center gap-3 mb-6">
            <span className="text-4xl">ü§ñ</span>
            <h2 className="text-3xl font-bold text-gray-800">Conclusioni AI</h2>
          </div>
          
          {loadingAI ? (
            <div className="flex flex-col items-center justify-center py-12">
              <div className="animate-spin rounded-full h-16 w-16 border-b-4 border-purple-600 mb-4"></div>
              <p className="text-lg font-semibold text-gray-700">Generazione raccomandazioni AI...</p>
              <p className="text-sm text-gray-500 mt-2">Analisi approfondita in corso (fino a 30 secondi)</p>
            </div>
          ) : aiConclusions ? (
            <div 
              className="prose max-w-none space-y-4"
              dangerouslySetInnerHTML={{ 
                __html: aiConclusions
                  .replace(/###\s*(.*)/g, '<h3 class="text-xl font-bold mt-6 mb-3 text-gray-800 border-b-2 border-blue-200 pb-2">$1</h3>')
                  .replace(/üéØ\s*\*\*(.*?)\*\*/g, '<div class="p-4 bg-blue-50 border-l-4 border-blue-400 rounded mb-3"><strong class="text-blue-800">üéØ $1</strong></div>')
                  .replace(/üí∞\s*\*\*(.*?)\*\*/g, '<div class="p-4 bg-green-50 border-l-4 border-green-400 rounded mb-3"><strong class="text-green-800">üí∞ $1</strong></div>')
                  .replace(/üìà\s*\*\*(.*?)\*\*/g, '<div class="p-4 bg-purple-50 border-l-4 border-purple-400 rounded mb-3"><strong class="text-purple-800">üìà $1</strong></div>')
                  .replace(/‚è±Ô∏è\s*\*\*(.*?)\*\*/g, '<div class="p-4 bg-orange-50 border-l-4 border-orange-400 rounded mb-3"><strong class="text-orange-800">‚è±Ô∏è $1</strong></div>')
                  .replace(/üîß\s*\*\*(.*?)\*\*/g, '<div class="p-4 bg-gray-50 border-l-4 border-gray-400 rounded mb-3"><strong class="text-gray-800">üîß $1</strong></div>')
                  .replace(/üèÜ\s*\*\*(.*?)\*\*/g, '<div class="p-5 bg-yellow-50 border-l-4 border-yellow-500 rounded mb-4"><strong class="text-yellow-900 text-lg">üèÜ $1</strong></div>')
                  .replace(/‚ö†Ô∏è\s*\*\*(.*?)\*\*/g, '<div class="p-5 bg-red-50 border-l-4 border-red-500 rounded mb-4"><strong class="text-red-900 text-lg">‚ö†Ô∏è $1</strong></div>')
                  .replace(/üöÄ\s*\*\*(.*?)\*\*/g, '<div class="p-5 bg-indigo-50 border-l-4 border-indigo-500 rounded mb-4"><strong class="text-indigo-900 text-lg">üöÄ $1</strong></div>')
                  .replace(/\*\*(.*?)\*\*/g, '<strong class="font-bold">$1</strong>')
                  .replace(/\n\n/g, '<br><br>')
                  .replace(/\n/g, ' ')
              }} 
            />
          ) : (
            <p className="text-gray-500 italic text-center py-8">‚ö†Ô∏è Suggerimenti AI non disponibili</p>
          )}
        </div>
      </div>
    </div>
  );
};

export default ResultsByCategoryPage;
