import { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { Radar, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Legend, ResponsiveContainer } from 'recharts';

const CATEGORIES_ORDER = ["Governance", "Monitoring & Control", "Technology", "Organization"];

interface Result {
  process: string;
  activity: string;
  category: string;
  dimension: string;
  score: number;
  note?: string;
  is_not_applicable?: boolean;
}


// Calcola area poligono dato un array di punti {x, y}

const getScoreIcon = (score: number | null | undefined) => {
  if (score === null || score === undefined) return <span className="text-gray-400">-</span>;
  if (score >= 4.0) return <span className="text-xl">‚úÖ</span>;
  if (score >= 3.0) return <span className="text-xl">üü¢</span>;
  if (score >= 2.0) return <span className="text-xl">‚≠ï</span>;
  if (score >= 1.0) return <span className="text-xl">üî¥</span>;
  return <span className="text-xl">‚ùå</span>;
};

const ResultsByCategoryPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [results, setResults] = useState<Result[]>([]);
  const [loading, setLoading] = useState(true);
  const [aiConclusions, setAiConclusions] = useState<string>('');
  const [loadingAI, setLoadingAI] = useState(false);
  const [aiSaved, setAiSaved] = useState(false);
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    axios.get(`/api/assessment/${id}/results`)
      .then(res => {
        setResults(res.data);
        setLoading(false);
      })
      .catch(err => {
        console.error(err);
        setLoading(false);
      });
    
    // Controlla prima se esistono conclusioni gi√† salvate
    axios.get(`/api/assessment/session/${id}`)
      .then(sessionRes => {
        if (sessionRes.data.raccomandazioni) {
          // Usa le conclusioni salvate
          setAiConclusions(sessionRes.data.raccomandazioni);
          setAiSaved(true);
          setLoadingAI(false);
        } else {
          // Genera nuove conclusioni
          setLoadingAI(true);
          // Controlla prima se esistono conclusioni salvate
    axios.get(`/api/assessment/session/${id}`)
      .then(sessionRes => {
        if (sessionRes.data.raccomandazioni) {
          setAiConclusions(sessionRes.data.raccomandazioni);
          setAiSaved(true);
        } else {
          setLoadingAI(true);
          axios.get(`/api/assessment/${id}/ai-suggestions-enhanced?include_roadmap=true`)
            .then(res => {
              setAiConclusions(res.data.suggestions);
              setLoadingAI(false);
            })
            .catch(err => {
              console.error('AI suggestions error:', err);
              setLoadingAI(false);
            });
        }
      })
      .catch(() => {
        setLoadingAI(true);
        axios.get(`/api/assessment/${id}/ai-suggestions-enhanced?include_roadmap=true`)
          .then(res => {
            setAiConclusions(res.data.suggestions);
            setLoadingAI(false);
          })
          .catch(err => {
            console.error('AI suggestions error:', err);
            setLoadingAI(false);
          });
      });
        }
      })
      .catch(() => {
        // Errore nel caricare la sessione, prova comunque a generare
        setLoadingAI(true);
        // Controlla prima se esistono conclusioni salvate
    axios.get(`/api/assessment/session/${id}`)
      .then(sessionRes => {
        if (sessionRes.data.raccomandazioni) {
          setAiConclusions(sessionRes.data.raccomandazioni);
          setAiSaved(true);
        } else {
          setLoadingAI(true);
          axios.get(`/api/assessment/${id}/ai-suggestions-enhanced?include_roadmap=true`)
            .then(res => {
              setAiConclusions(res.data.suggestions);
              setLoadingAI(false);
            })
            .catch(err => {
              console.error('AI suggestions error:', err);
              setLoadingAI(false);
            });
        }
      })
      .catch(() => {
        setLoadingAI(true);
        axios.get(`/api/assessment/${id}/ai-suggestions-enhanced?include_roadmap=true`)
          .then(res => {
            setAiConclusions(res.data.suggestions);
            setLoadingAI(false);
          })
          .catch(err => {
            console.error('AI suggestions error:', err);
            setLoadingAI(false);
          });
      });
      });
  }, [id]);

  if (loading) return <div className="p-8">Caricamento...</div>;

  // Organizza: categoria -> processo -> attivit√† -> {dimensione: data}
  const organized: any = {};
  results.forEach(r => {
    if (!organized[r.category]) organized[r.category] = {};
    if (!organized[r.category][r.process]) organized[r.category][r.process] = {};
    if (!organized[r.category][r.process][r.activity]) organized[r.category][r.process][r.activity] = {};
    organized[r.category][r.process][r.activity][r.dimension] = {
      score: r.score,
      note: r.note,
      is_not_applicable: r.is_not_applicable
    };
  });

  const calculateRowAverage = (dimensions: any) => {
    let total = 0, count = 0;
    Object.values(dimensions).forEach((d: any) => {
      if (!d.is_not_applicable && d.score !== undefined && d.score !== null) {
        total += d.score;
        count++;
      }
    });
    return count > 0 ? total / count : null;
  };

  const calculateProcessAverage = (activities: any) => {
    const avgs: number[] = [];
    Object.values(activities).forEach((dims: any) => {
      const avg = calculateRowAverage(dims);
      if (avg !== null) avgs.push(avg);
    });
    return avgs.length > 0 ? (avgs.reduce((a,b) => a+b, 0) / avgs.length).toFixed(2) : 'N/A';
  };

  // CALCOLO PER TABELLE RIASSUNTIVE
  // Per ogni attivit√†, raccogli gli score delle 4 categorie
  const activityScores = new Map<string, any>();
  
  CATEGORIES_ORDER.forEach(category => {
    if (!organized[category]) return;
    
    Object.entries(organized[category]).forEach(([process, activities]: [string, any]) => {
      Object.entries(activities).forEach(([activity, dimensions]: [string, any]) => {
        const key = `${process}|||${activity}`;
        
        if (!activityScores.has(key)) {
          activityScores.set(key, {
            process,
            activity,
            governance: null,
            monitoring: null,
            technology: null,
            organization: null,
            note: ''
          });
        }
        
        const item = activityScores.get(key);
        const avg = calculateRowAverage(dimensions);
        
        if (!item.note) {
          const noteObj = Object.values(dimensions).find((d: any) => d?.note);
          if (noteObj) item.note = (noteObj as any).note || '';
        }
        
        if (category === 'Governance') item.governance = avg;
        else if (category === 'Monitoring & Control') item.monitoring = avg;
        else if (category === 'Technology') item.technology = avg;
        else if (category === 'Organization') item.organization = avg;
      });
    });
  });
  
  const allActivities = Array.from(activityScores.values());
  
  // Calcola processRating (media delle 4 categorie)
  allActivities.forEach(act => {
    const scores = [act.governance, act.monitoring, act.technology, act.organization]
      .filter(s => s !== null && s !== undefined && !isNaN(s));
    act.processRating = scores.length > 0 ? scores.reduce((a, b) => a + b, 0) / scores.length : null;
  });

  // FILTRI: un'attivit√† compare in una tabella se ALMENO UNA delle 4 categorie √® nel range
  const critici = allActivities.filter(a => {
    const scores = [a.governance, a.monitoring, a.technology, a.organization];
    return scores.some(s => s !== null && s !== undefined && s < 2.0);
  }).sort((a, b) => (a.processRating || 0) - (b.processRating || 0));

  const debolezza = allActivities.filter(a => {
    const scores = [a.governance, a.monitoring, a.technology, a.organization];
    return scores.some(s => s !== null && s !== undefined && s >= 2.0 && s < 3.0);
  }).sort((a, b) => (a.processRating || 0) - (b.processRating || 0));

  const forza = allActivities.filter(a => {
    const scores = [a.governance, a.monitoring, a.technology, a.organization];
    return scores.some(s => s !== null && s !== undefined && s >= 3.0);
  }).sort((a, b) => (b.processRating || 0) - (a.processRating || 0));


  const saveAIConclusions = () => {
    setSaving(true);
    axios.put(`/api/assessment/${id}/save-ai-conclusions`, {
      text: aiConclusions
    })
      .then(() => {
        setAiSaved(true);
        setSaving(false);
        alert('‚úÖ Analisi AI salvata con successo!');
      })
      .catch(err => {
        console.error('Error saving AI:', err);
        setSaving(false);
        alert('‚ùå Errore nel salvataggio');
      });
  };
  return (
    <div className="min-h-screen bg-gray-50 p-8">

      <div className="max-w-7xl mx-auto">
        <div className="mb-8">
          <h1 className="text-3xl font-bold mb-6">Risultati Assessment Digitale 4.0</h1>
          <div className="flex justify-between items-center">
            <div className="bg-blue-500 text-white px-6 py-3 rounded-lg">
              <span className="text-sm font-semibold">FINAL RATE:</span>
              <span className="text-2xl font-bold ml-2">
                {(() => {
                  const allAvgs: number[] = [];
                  CATEGORIES_ORDER.forEach(cat => {
                    Object.values(organized[cat] || {}).forEach((activities: any) => {
                      Object.values(activities).forEach((dims: any) => {
                        const avg = calculateRowAverage(dims);
                        if (avg !== null) allAvgs.push(avg);
                      });
                    });
                  });
                  return allAvgs.length > 0 ? (allAvgs.reduce((a,b) => a+b, 0) / allAvgs.length).toFixed(2) : 'N/A';
                })()}
              </span>
            </div>
            <div className="flex gap-4">
              <button
                onClick={() => window.print()}
                className="px-6 py-3 bg-blue-500 hover:bg-blue-600 text-white rounded-lg font-semibold flex items-center gap-2"
              >
                üìÑ Scarica PDF
              </button>
              <button
                onClick={() => navigate('/dashboard')}
                className="px-6 py-3 bg-gray-300 hover:bg-gray-400 rounded-lg font-semibold"
              >
                Torna alla Dashboard
              </button>
            </div>
          </div>
        </div>

        {CATEGORIES_ORDER.filter(cat => organized[cat]).map(category => (
          <div key={category} className="mb-12">
            <h2 className="text-2xl font-bold text-white bg-blue-600 p-4 rounded-t-xl mb-6">
              {category}
            </h2>
            
            {Object.entries(organized[category]).map(([process, activities]: [string, any]) => {
              const allActivitiesKeys = Object.keys(activities);
              const allDimensions = allActivitiesKeys.length > 0 ? Object.keys(activities[allActivitiesKeys[0]]) : [];
              const processAvg = calculateProcessAverage(activities);

            

  return (
                <div key={process} className="bg-white shadow-lg rounded-xl p-8 mb-6">
                  <div className="flex justify-between items-center mb-4">
                    <h3 className="text-xl font-bold text-gray-800">{process}</h3>
                    <div className="bg-green-500 text-white px-4 py-2 rounded-lg">
                      <span className="text-sm font-semibold">MEDIA:</span>
                      <span className="text-xl font-bold ml-2">{processAvg}</span>
                    </div>
                  </div>

                  <div className="overflow-x-auto">
                    <table className="w-full border-collapse text-sm">
                      <thead>
                        <tr className="bg-blue-500">
                          <th className="border px-3 py-2 text-left text-white font-semibold">Attivit√†</th>
                          {allDimensions.map(dim => (
                            <th key={dim} className="border px-2 py-2 text-center text-white font-semibold">
                              {dim.substring(0, 60)}
                            </th>
                          ))}
                          <th className="border px-3 py-2 text-center text-white font-semibold">Media</th>
                          <th className="border px-3 py-2 text-center text-white font-semibold">Note</th>
                        </tr>
                      </thead>
                      <tbody>
                        {Object.entries(activities).map(([activity, dimensions]: [string, any]) => {
                          const note = Object.values(dimensions).find((d: any) => d?.note);
                          const noteText = note ? (note as any).note : '';
                          const rowAvg = calculateRowAverage(dimensions);

                        

  return (
                            <tr key={activity} className="hover:bg-gray-50">
                              <td className="border px-3 py-2 text-gray-800 font-medium">{activity}</td>
                              {allDimensions.map(dim => {
                                const dimData = dimensions[dim];
                                const score = dimData?.score ?? 0;
                                const isNA = dimData?.is_not_applicable;

                              

  return (
                                  <td key={dim} className="border px-2 py-2 text-center">
                                    {isNA ? (
                                      <span className="inline-block px-3 py-1 rounded font-semibold bg-gray-200 text-gray-600">N/A</span>
                                    ) : (
                                      <span className={`inline-block px-3 py-1 rounded font-semibold ${
                                        score === 0 ? 'bg-red-100 text-red-800' :
                                        score === 1 ? 'bg-orange-100 text-orange-800' :
                                        score === 2 ? 'bg-yellow-100 text-yellow-800' :
                                        score === 3 ? 'bg-yellow-100 text-yellow-700' :
                                        score === 4 ? 'bg-green-100 text-green-800' :
                                        'bg-blue-100 text-blue-800'
                                      }`}>{score}</span>
                                    )}
                                  </td>
                                );
                              })}
                              <td className="border px-3 py-2 text-center bg-blue-50">
                                <span className="font-bold text-blue-800">
                                  {rowAvg !== null ? rowAvg.toFixed(2) : 'N/A'}
                                </span>
                              </td>
                              <td className="border px-3 py-2 text-gray-600 text-sm">{noteText || '-'}</td>
                            </tr>
                          );
                        })}
                      </tbody>
                    </table>
                  </div>
                </div>
              );
            })}
          </div>
        ))}

        {/* Tabelle Riassuntive */}
        <div className="mt-12 space-y-8">
          {/* Punti Critici */}
          <div className="bg-white rounded-xl shadow-lg p-8">
            <div className="flex items-center gap-3 mb-6">
              <div className="bg-red-600 text-white px-4 py-2 rounded-lg font-bold">&lt; 2.00</div>
              <h3 className="text-2xl font-bold">PUNTI CRITICI ({critici.length})</h3>
            </div>
            {critici.length > 0 ? (
              <table className="w-full border-collapse text-sm">
                <thead>
                  <tr className="bg-red-600 text-white">
                    <th className="border px-3 py-2 text-left">Processo</th>
                    <th className="border px-3 py-2 text-left">Sottoprocesso</th>
                    <th className="border px-3 py-2 text-center">Governance</th>
                    <th className="border px-3 py-2 text-center">M&C</th>
                    <th className="border px-3 py-2 text-center">Technology</th>
                    <th className="border px-3 py-2 text-center">Organization</th>
                    <th className="border px-3 py-2 text-center bg-amber-100 text-gray-900">PROCESS RATING</th>
                    <th className="border px-3 py-2 text-left">Note</th>
                  </tr>
                </thead>
                <tbody>
                  {critici.map((act, idx) => (
                    <tr key={idx} className="bg-red-50">
                      <td className="border px-3 py-2 font-semibold">{act.process}</td>
                      <td className="border px-3 py-2">{act.activity}</td>
                      <td className="border px-3 py-2 text-center">
                        <div className="flex items-center justify-center gap-1">
                          {getScoreIcon(act.governance)}
                          <span className="font-bold text-sm">{act.governance?.toFixed(2) || '-'}</span>
                        </div>
                      </td>
                      <td className="border px-3 py-2 text-center">
                        <div className="flex items-center justify-center gap-1">
                          {getScoreIcon(act.monitoring)}
                          <span className="font-bold text-sm">{act.monitoring?.toFixed(2) || '-'}</span>
                        </div>
                      </td>
                      <td className="border px-3 py-2 text-center">
                        <div className="flex items-center justify-center gap-1">
                          {getScoreIcon(act.technology)}
                          <span className="font-bold text-sm">{act.technology?.toFixed(2) || '-'}</span>
                        </div>
                      </td>
                      <td className="border px-3 py-2 text-center">
                        <div className="flex items-center justify-center gap-1">
                          {getScoreIcon(act.organization)}
                          <span className="font-bold text-sm">{act.organization?.toFixed(2) || '-'}</span>
                        </div>
                      </td>
                      <td className="border px-3 py-2 text-center bg-amber-50">
                        <span className="font-bold text-lg">{act.processRating?.toFixed(2) || '-'}</span>
                      </td>
                      <td className="border px-3 py-2 text-xs">{act.note || '-'}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            ) : <p className="text-gray-500">Nessun punto critico</p>}
          </div>

          {/* Punti di Debolezza */}
          <div className="bg-white rounded-xl shadow-lg p-8">
            <div className="flex items-center gap-3 mb-6">
              <div className="bg-yellow-500 text-white px-4 py-2 rounded-lg font-bold">2.00 - 2.99</div>
              <h3 className="text-2xl font-bold">PUNTI DI DEBOLEZZA ({debolezza.length})</h3>
            </div>
            {debolezza.length > 0 ? (
              <table className="w-full border-collapse text-sm">
                <thead>
                  <tr className="bg-yellow-500 text-white">
                    <th className="border px-3 py-2 text-left">Processo</th>
                    <th className="border px-3 py-2 text-left">Sottoprocesso</th>
                    <th className="border px-3 py-2 text-center">Governance</th>
                    <th className="border px-3 py-2 text-center">M&C</th>
                    <th className="border px-3 py-2 text-center">Technology</th>
                    <th className="border px-3 py-2 text-center">Organization</th>
                    <th className="border px-3 py-2 text-center bg-amber-100 text-gray-900">PROCESS RATING</th>
                    <th className="border px-3 py-2 text-left">Note</th>
                  </tr>
                </thead>
                <tbody>
                  {debolezza.map((act, idx) => (
                    <tr key={idx} className="bg-yellow-50">
                      <td className="border px-3 py-2 font-semibold">{act.process}</td>
                      <td className="border px-3 py-2">{act.activity}</td>
                      <td className="border px-3 py-2 text-center">
                        <div className="flex items-center justify-center gap-1">
                          {getScoreIcon(act.governance)}
                          <span className="font-bold text-sm">{act.governance?.toFixed(2) || '-'}</span>
                        </div>
                      </td>
                      <td className="border px-3 py-2 text-center">
                        <div className="flex items-center justify-center gap-1">
                          {getScoreIcon(act.monitoring)}
                          <span className="font-bold text-sm">{act.monitoring?.toFixed(2) || '-'}</span>
                        </div>
                      </td>
                      <td className="border px-3 py-2 text-center">
                        <div className="flex items-center justify-center gap-1">
                          {getScoreIcon(act.technology)}
                          <span className="font-bold text-sm">{act.technology?.toFixed(2) || '-'}</span>
                        </div>
                      </td>
                      <td className="border px-3 py-2 text-center">
                        <div className="flex items-center justify-center gap-1">
                          {getScoreIcon(act.organization)}
                          <span className="font-bold text-sm">{act.organization?.toFixed(2) || '-'}</span>
                        </div>
                      </td>
                      <td className="border px-3 py-2 text-center bg-amber-50">
                        <span className="font-bold text-lg">{act.processRating?.toFixed(2) || '-'}</span>
                      </td>
                      <td className="border px-3 py-2 text-xs">{act.note || '-'}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            ) : <p className="text-gray-500">Nessun punto di debolezza</p>}
          </div>

          {/* Punti di Forza */}
          <div className="bg-white rounded-xl shadow-lg p-8">
            <div className="flex items-center gap-3 mb-6">
              <div className="bg-green-600 text-white px-4 py-2 rounded-lg font-bold">&gt;= 3.00</div>
              <h3 className="text-2xl font-bold">PUNTI DI FORZA ({forza.length})</h3>
            </div>
            {forza.length > 0 ? (
              <table className="w-full border-collapse text-sm">
                <thead>
                  <tr className="bg-green-600 text-white">
                    <th className="border px-3 py-2 text-left">Processo</th>
                    <th className="border px-3 py-2 text-left">Sottoprocesso</th>
                    <th className="border px-3 py-2 text-center">Governance</th>
                    <th className="border px-3 py-2 text-center">M&C</th>
                    <th className="border px-3 py-2 text-center">Technology</th>
                    <th className="border px-3 py-2 text-center">Organization</th>
                    <th className="border px-3 py-2 text-center bg-amber-100 text-gray-900">PROCESS RATING</th>
                    <th className="border px-3 py-2 text-left">Note</th>
                  </tr>
                </thead>
                <tbody>
                  {forza.map((act, idx) => (
                    <tr key={idx} className="bg-green-50">
                      <td className="border px-3 py-2 font-semibold">{act.process}</td>
                      <td className="border px-3 py-2">{act.activity}</td>
                      <td className="border px-3 py-2 text-center">
                        <div className="flex items-center justify-center gap-1">
                          {getScoreIcon(act.governance)}
                          <span className="font-bold text-sm">{act.governance?.toFixed(2) || '-'}</span>
                        </div>
                      </td>
                      <td className="border px-3 py-2 text-center">
                        <div className="flex items-center justify-center gap-1">
                          {getScoreIcon(act.monitoring)}
                          <span className="font-bold text-sm">{act.monitoring?.toFixed(2) || '-'}</span>
                        </div>
                      </td>
                      <td className="border px-3 py-2 text-center">
                        <div className="flex items-center justify-center gap-1">
                          {getScoreIcon(act.technology)}
                          <span className="font-bold text-sm">{act.technology?.toFixed(2) || '-'}</span>
                        </div>
                      </td>
                      <td className="border px-3 py-2 text-center">
                        <div className="flex items-center justify-center gap-1">
                          {getScoreIcon(act.organization)}
                          <span className="font-bold text-sm">{act.organization?.toFixed(2) || '-'}</span>
                        </div>
                      </td>
                      <td className="border px-3 py-2 text-center bg-amber-50">
                        <span className="font-bold text-lg">{act.processRating?.toFixed(2) || '-'}</span>
                      </td>
                      <td className="border px-3 py-2 text-xs">{act.note || '-'}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            ) : <p className="text-gray-500">Nessun punto di forza</p>}
          </div>
        </div>

        {/* Radar Charts */}
        <div className="mt-12 space-y-8">
          <h2 className="text-3xl font-bold text-gray-800 mb-8">Analisi Radar</h2>
          
          {/* Radar per Processo */}
          <div className="bg-white rounded-xl shadow-lg p-8">
            <h3 className="text-2xl font-bold mb-6">Radar per Processo</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {Object.keys(organized[CATEGORIES_ORDER[0]] || {}).map(process => {
                const data = CATEGORIES_ORDER.map(cat => {
                  const activities = organized[cat]?.[process] || {};
                  const avgs: number[] = [];
                  Object.values(activities).forEach((dims: any) => {
                    const avg = calculateRowAverage(dims);
                    if (avg !== null) avgs.push(avg);
                  });
                  const processAvg = avgs.length > 0 ? avgs.reduce((a,b) => a+b, 0) / avgs.length : 0;
                  return {
                    category: cat.replace('Monitoring & Control', 'M&C'),
                    value: processAvg
                  };
                });
                
              

  return (
                  <div key={process} className="border rounded-lg p-4">
                    <h4 className="font-bold text-lg mb-4 text-center">{process}</h4>
                    <ResponsiveContainer width="100%" height={300}>
                      <RadarChart data={data}>
                        <PolarGrid />
                        <PolarAngleAxis dataKey="category" />
                        <PolarRadiusAxis angle={90} domain={[0, 5]} />
                        <Radar name={process} dataKey="value" stroke="#3b82f6" fill="#3b82f6" fillOpacity={0.6} />
                        <Legend />
                      </RadarChart>
                    </ResponsiveContainer>
                  </div>
                );
              })}
            </div>
          </div>

          {/* Radar per Categoria */}
          <div className="bg-white rounded-xl shadow-lg p-8">
            <h3 className="text-2xl font-bold mb-6">Radar per Categoria</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {CATEGORIES_ORDER.map(category => {
                const processes = organized[category] || {};
                const data = Object.keys(processes).map(proc => {
                  const activities = processes[proc];
                  const avgs: number[] = [];
                  Object.values(activities).forEach((dims: any) => {
                    const avg = calculateRowAverage(dims);
                    if (avg !== null) avgs.push(avg);
                  });
                  const procAvg = avgs.length > 0 ? avgs.reduce((a,b) => a+b, 0) / avgs.length : 0;
                  return {
                    process: proc,
                    value: procAvg
                  };
                });
                
              

  return (
                  <div key={category} className="border rounded-lg p-4">
                    <h4 className="font-bold text-lg mb-4 text-center">{category}</h4>
                    <ResponsiveContainer width="100%" height={300}>
                      <RadarChart data={data}>
                        <PolarGrid />
                        <PolarAngleAxis dataKey="process" />
                        <PolarRadiusAxis angle={90} domain={[0, 5]} />
                        <Radar name={category} dataKey="value" stroke="#10b981" fill="#10b981" fillOpacity={0.6} />
                        <Legend />
                      </RadarChart>
                    </ResponsiveContainer>
                  </div>
                );
              })}
            </div>
          </div>

          {/* Radar Riassuntivo - Tutti i Processi */}
          <div className="bg-white rounded-xl shadow-lg p-8">
            <h3 className="text-2xl font-bold mb-6">Radar Riassuntivo - Confronto Processi</h3>
            <ResponsiveContainer width="100%" height={500}>
              <RadarChart data={CATEGORIES_ORDER.map(cat => ({
                category: cat.replace('Monitoring & Control', 'M&C'),
                ...Object.keys(organized[CATEGORIES_ORDER[0]] || {}).reduce((acc: any, proc) => {
                  const activities = organized[cat]?.[proc] || {};
                  const avgs: number[] = [];
                  Object.values(activities).forEach((dims: any) => {
                    const avg = calculateRowAverage(dims);
                    if (avg !== null) avgs.push(avg);
                  });
                  acc[proc] = avgs.length > 0 ? avgs.reduce((a,b) => a+b, 0) / avgs.length : 0;
                  return acc;
                }, {})
              }))}>
                <PolarGrid />
                <PolarAngleAxis dataKey="category" />
                <PolarRadiusAxis angle={90} domain={[0, 5]} />
                {Object.keys(organized[CATEGORIES_ORDER[0]] || {}).map((proc, idx) => {
                  const colors = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#ec4899'];
                  return <Radar key={proc} name={proc} dataKey={proc} stroke={colors[idx % colors.length]} fill={colors[idx % colors.length]} fillOpacity={0} strokeWidth={2} />;
                })}
                <Legend wrapperStyle={{ fontSize: "12px" }} layout="vertical" align="right" verticalAlign="middle" />
              </RadarChart>
            </ResponsiveContainer>

            <div className="mt-4 p-4 bg-blue-50 rounded-lg">
              <h4 className="font-bold mb-2">üìä Calcolo Area Poligono</h4>
              <p className="text-sm text-gray-700">
                {(() => {
                  const data = CATEGORIES_ORDER.map(cat => ({
                    category: cat.replace('Monitoring & Control', 'M&C'),
                    ...Object.keys(organized[CATEGORIES_ORDER[0]] || {}).reduce((acc: any, proc) => {
                      const activities = organized[cat]?.[proc] || {};
                      const avgs: number[] = [];
                      Object.values(activities).forEach((dims: any) => {
                        const avg = calculateRowAverage(dims);
                        if (avg !== null) avgs.push(avg);
                      });
                      acc[proc] = avgs.length > 0 ? avgs.reduce((a,b) => a+b, 0) / avgs.length : 0;
                      return acc;
                    }, {})
                  }));
                  
                  // Calcola area per ogni processo
                  const processes = Object.keys(organized[CATEGORIES_ORDER[0]] || {});
                  return processes.map((proc, idx) => {
                    const values = data.map(d => d[proc] || 0);
                    // Formula area poligono regolare: (n * r^2 * sin(2œÄ/n)) / 2
                    const n = values.length;
                    const avgRadius = values.reduce((a,b) => a+b, 0) / n;
                    const area = (n * Math.pow(avgRadius, 2) * Math.sin(2 * Math.PI / n)) / 2;
                    const colors = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#ec4899'];
                  

  return (
                      <span key={proc} className="inline-block mr-4">
                        <span style={{color: colors[idx % colors.length]}} className="font-bold">‚ñ†</span> {proc}: <strong>{area.toFixed(2)}</strong>
                      </span>
                    );
                  });
                })()}
              </p>
        {/* Conclusioni AI */}
        <div className="mt-12 bg-gradient-to-r from-purple-50 to-blue-50 rounded-xl shadow-lg p-8 border-2 border-purple-200">
          <div className="flex items-center gap-3 mb-6">
            <span className="text-4xl">ü§ñ</span>
            <h2 className="text-3xl font-bold text-gray-800">Conclusioni AI</h2>
          </div>
          
          {loadingAI ? (
            <div className="flex flex-col items-center justify-center py-12">
              <div className="animate-spin rounded-full h-16 w-16 border-b-4 border-purple-600 mb-4"></div>
              <p className="text-lg font-semibold text-gray-700">Generazione raccomandazioni AI...</p>
              <p className="text-sm text-gray-500 mt-2">Analisi approfondita in corso (fino a 30 secondi)</p>
            </div>
          ) : aiConclusions ? (
            <div 
              className="prose max-w-none space-y-4"
              dangerouslySetInnerHTML={{ 
                __html: aiConclusions
                  .replace(/###\s*(.*)/g, '<h3 class="text-xl font-bold mt-6 mb-3 text-gray-800 border-b-2 border-blue-200 pb-2">$1</h3>')
                  .replace(/üéØ\s*\*\*(.*?)\*\*/g, '<div class="p-4 bg-blue-50 border-l-4 border-blue-400 rounded mb-3"><strong class="text-blue-800">üéØ $1</strong></div>')
                  .replace(/üí∞\s*\*\*(.*?)\*\*/g, '<div class="p-4 bg-green-50 border-l-4 border-green-400 rounded mb-3"><strong class="text-green-800">üí∞ $1</strong></div>')
                  .replace(/üìà\s*\*\*(.*?)\*\*/g, '<div class="p-4 bg-purple-50 border-l-4 border-purple-400 rounded mb-3"><strong class="text-purple-800">üìà $1</strong></div>')
                  .replace(/‚è±Ô∏è\s*\*\*(.*?)\*\*/g, '<div class="p-4 bg-orange-50 border-l-4 border-orange-400 rounded mb-3"><strong class="text-orange-800">‚è±Ô∏è $1</strong></div>')
                  .replace(/üîß\s*\*\*(.*?)\*\*/g, '<div class="p-4 bg-gray-50 border-l-4 border-gray-400 rounded mb-3"><strong class="text-gray-800">üîß $1</strong></div>')
                  .replace(/üèÜ\s*\*\*(.*?)\*\*/g, '<div class="p-5 bg-yellow-50 border-l-4 border-yellow-500 rounded mb-4"><strong class="text-yellow-900 text-lg">üèÜ $1</strong></div>')
                  .replace(/‚ö†Ô∏è\s*\*\*(.*?)\*\*/g, '<div class="p-5 bg-red-50 border-l-4 border-red-500 rounded mb-4"><strong class="text-red-900 text-lg">‚ö†Ô∏è $1</strong></div>')
                  .replace(/üöÄ\s*\*\*(.*?)\*\*/g, '<div class="p-5 bg-indigo-50 border-l-4 border-indigo-500 rounded mb-4"><strong class="text-indigo-900 text-lg">üöÄ $1</strong></div>')
                  .replace(/\*\*(.*?)\*\*/g, '<strong class="font-bold">$1</strong>')
                  .replace(/\n\n/g, '<br><br>')
                  .replace(/\n/g, ' ')
              }} 
            />
          ) : (
            <p className="text-gray-500 italic text-center py-8">‚ö†Ô∏è Suggerimenti AI non disponibili</p>
          )}
          
          {aiConclusions && !aiSaved && (
            <div className="mt-6 text-center">
              <button onClick={saveAIConclusions} disabled={saving} className={`px-8 py-3 rounded-lg font-semibold ${saving ? 'bg-gray-400' : 'bg-purple-600 hover:bg-purple-700'} text-white`}>
                {saving ? 'üíæ Salvataggio...' : 'üíæ Salva Analisi AI'}
              </button>
            </div>
          )}
          
          {aiSaved && (
            <div className="mt-6 p-4 bg-green-50 rounded-lg text-center">
              <span className="text-green-700 font-semibold">‚úÖ Analisi salvata</span>
            </div>
          )}
          
          {/* Bottone Salva Analisi */}
          {aiConclusions && !aiSaved && (
            <div className="mt-6 flex justify-center">
              <button
                onClick={saveAIConclusions}
                disabled={saving}
                className={`px-8 py-3 rounded-lg font-semibold text-white ${
                  saving ? 'bg-gray-400 cursor-not-allowed' : 'bg-purple-600 hover:bg-purple-700'
                } flex items-center gap-2`}
              >
                {saving ? 'üíæ Salvataggio...' : 'üíæ Salva Analisi AI'}
              </button>
            </div>
          )}
          
          {aiSaved && (
            <div className="mt-6 p-4 bg-green-50 border border-green-200 rounded-lg text-center">
              <span className="text-green-700 font-semibold">‚úÖ Analisi AI salvata permanentemente</span>
            </div>
          )}
        </div>
      </div>
        </div>
    </div>
      </div>
    </div>
  );
};

export default ResultsByCategoryPage;
